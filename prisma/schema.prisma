// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String      @id @default(uuid())
  email     String   @unique
  password  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Ingredient {
  id            String @id @default(uuid())
  name          String
  category      Category
  unit          Unit
  pricePerUnit  Float?
  description   String?
  createdAt     DateTime @default(now()) @map("creatd_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  recipes       RecipeIngredient[]


  @@map("ingredients")
}

enum Category {
  VEGETABLES
  FRUITS
  MEAT
  DAIRY
  SEASONING
  OTHER
}

enum Unit {
  GRAMS
  KILOGRAMS
  LITERS
  MILILITERS
  PIECES
}

model Recipe {
  id          String   @id @default(uuid())
  name       String
  description String
  imageUrl   String?  @map("image_url")
  ingredients RecipeIngredient[]

  @@map("recipes")
}

model RecipeIngredient {
  id           String   @id @default(uuid())
  recipeId     String  
  ingredientId String  
  quantity     Float

  recipe       Recipe      @relation(fields: [recipeId], references: [id])
  ingredient   Ingredient  @relation(fields: [ingredientId], references: [id])

  @@map("recipe_ingredients")
}